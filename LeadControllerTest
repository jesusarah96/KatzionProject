@isTest private class LeadControllerTest {
    
    @testSetup
    private static void createSampleContacts() {
        List<Contact> contacts = new List<Contact>();
        for (Integer i = 0; i < 10; i++) {
            contacts.add(new Contact(
                FirstName = 'Test' + i,
                LastName  = 'Contact' + i,
                Email     = 'test' + i + '@example.com',
                Phone     = '999999999' + i
            ));
        }
        insert contacts;
        
        List<Lead> leads = new List<Lead>();
        for (Integer i = 0; i < 10; i++) {
            leads.add(new Lead(
                FirstName = 'Test ' + i,
                LastName  = 'Lead ' + i,
                Company   = 'Company ' + i,
                Email     = 'test' + i + '@example.com',
                Phone     = '999999999' + i
            ));
        }
        insert leads;
    }
    
    @isTest
    static void testgetAllLeads_Success() {
        Test.startTest();
        List<Lead> result = LeadController.getAllLeads();
        Test.stopTest();
        
        System.assertEquals(10, result.size(), 'All leads count should match.');
    }
    
    @isTest
    static void testSyncContactsToOrgB_Success() {
        Test.setMock(HttpCalloutMock.class, new LeadControllerTest.MockSuccessResponse());
        
        Test.startTest();
        Map<String, Object> result = LeadController.syncContactsToOrgB();
        Test.stopTest();
        
        System.assertEquals('success', result.get('status'), 'Status should be success');
        System.assertNotEquals(0, result.get('sent'), 'At least one contact should be sent');
        System.assert(result.containsKey('responses'), 'Responses key should exist');
    }
    
    @isTest
    static void testSyncContactsToOrgB_HttpError() {
        Test.setMock(HttpCalloutMock.class, new LeadControllerTest.MockErrorResponse());
        
        Test.startTest();
        Map<String, Object> result = LeadController.syncContactsToOrgB();
        Test.stopTest();
        
        System.assertEquals('partial_failure', result.get('status'));
        System.assert(result.containsKey('errorDetails'), 'Error details should be present');
    }

    @isTest
    static void testSyncContactsToOrgB_CalloutException() {
        Test.setMock(HttpCalloutMock.class, new LeadControllerTest.MockExceptionResponse());
        
        Test.startTest();
        Map<String, Object> result = LeadController.syncContactsToOrgB();
        Test.stopTest();
        
        System.assertEquals('callout_exception', result.get('status'));
        System.assert(result.containsKey('message'), 'Exception message should be present');
    }

    @isTest
    static void testSyncContactsToOrgB_Exception() {
        Test.setMock(HttpCalloutMock.class, new LeadControllerTest.MockExceptionResponseNew());
        
        Test.startTest();
        Map<String, Object> result = LeadController.syncContactsToOrgB();
        Test.stopTest();
        
        System.assertEquals('error', result.get('status'));
        System.assert(result.containsKey('message'), 'Exception message should be present');
    }
    
    private class MockSuccessResponse implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HttpResponse res = new HttpResponse();
            res.setHeader('Content-Type', 'application/json');
            res.setBody('{"result": "success"}');
            res.setStatusCode(200);
            return res;
        }
    }

    private class MockErrorResponse implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HttpResponse res = new HttpResponse();
            res.setHeader('Content-Type', 'application/json');
            res.setBody('{"error": "Bad Request"}');
            res.setStatusCode(400);
            return res;
        }
    }
    
    private class MockExceptionResponse implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            throw new CalloutException('Simulated network failure');
        }
    }
    
    private class MockExceptionResponseNew implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            throw new DmlException('Simulated network failure');
        }
    }
}
